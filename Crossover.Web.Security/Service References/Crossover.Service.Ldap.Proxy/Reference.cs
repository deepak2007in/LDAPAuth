//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Crossover.Web.Security.Crossover.Service.Ldap.Proxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserInfo", Namespace="http://schemas.datacontract.org/2004/07/Crossover.Service.Ldap")]
    [System.SerializableAttribute()]
    public partial class UserInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] UserGroupsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] UserGroups {
            get {
                return this.UserGroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.UserGroupsField, value) != true)) {
                    this.UserGroupsField = value;
                    this.RaisePropertyChanged("UserGroups");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Crossover.Service.Ldap.Proxy.ILdapService")]
    public interface ILdapService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILdapService/Authenticate", ReplyAction="http://tempuri.org/ILdapService/AuthenticateResponse")]
        Crossover.Service.Ldap.Proxy.UserInfo Authenticate(string email, string passwordHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILdapService/Authenticate", ReplyAction="http://tempuri.org/ILdapService/AuthenticateResponse")]
        System.Threading.Tasks.Task<Crossover.Service.Ldap.Proxy.UserInfo> AuthenticateAsync(string email, string passwordHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILdapService/GetUserInfo", ReplyAction="http://tempuri.org/ILdapService/GetUserInfoResponse")]
        Crossover.Service.Ldap.Proxy.UserInfo GetUserInfo(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILdapService/GetUserInfo", ReplyAction="http://tempuri.org/ILdapService/GetUserInfoResponse")]
        System.Threading.Tasks.Task<Crossover.Service.Ldap.Proxy.UserInfo> GetUserInfoAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILdapService/IsAuthenticated", ReplyAction="http://tempuri.org/ILdapService/IsAuthenticatedResponse")]
        bool IsAuthenticated(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILdapService/IsAuthenticated", ReplyAction="http://tempuri.org/ILdapService/IsAuthenticatedResponse")]
        System.Threading.Tasks.Task<bool> IsAuthenticatedAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILdapService/Register", ReplyAction="http://tempuri.org/ILdapService/RegisterResponse")]
        Crossover.Service.Ldap.Proxy.UserInfo Register(string email, string passwordHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILdapService/Register", ReplyAction="http://tempuri.org/ILdapService/RegisterResponse")]
        System.Threading.Tasks.Task<Crossover.Service.Ldap.Proxy.UserInfo> RegisterAsync(string email, string passwordHash);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILdapServiceChannel : Crossover.Service.Ldap.Proxy.ILdapService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LdapServiceClient : System.ServiceModel.ClientBase<Crossover.Service.Ldap.Proxy.ILdapService>, Crossover.Service.Ldap.Proxy.ILdapService {
        
        public LdapServiceClient() {
        }
        
        public LdapServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LdapServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LdapServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LdapServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Crossover.Service.Ldap.Proxy.UserInfo Authenticate(string email, string passwordHash) {
            return base.Channel.Authenticate(email, passwordHash);
        }
        
        public System.Threading.Tasks.Task<Crossover.Service.Ldap.Proxy.UserInfo> AuthenticateAsync(string email, string passwordHash) {
            return base.Channel.AuthenticateAsync(email, passwordHash);
        }
        
        public Crossover.Service.Ldap.Proxy.UserInfo GetUserInfo(string email) {
            return base.Channel.GetUserInfo(email);
        }
        
        public System.Threading.Tasks.Task<Crossover.Service.Ldap.Proxy.UserInfo> GetUserInfoAsync(string email) {
            return base.Channel.GetUserInfoAsync(email);
        }
        
        public bool IsAuthenticated(string email) {
            return base.Channel.IsAuthenticated(email);
        }
        
        public System.Threading.Tasks.Task<bool> IsAuthenticatedAsync(string email) {
            return base.Channel.IsAuthenticatedAsync(email);
        }
        
        public Crossover.Service.Ldap.Proxy.UserInfo Register(string email, string passwordHash) {
            return base.Channel.Register(email, passwordHash);
        }
        
        public System.Threading.Tasks.Task<Crossover.Service.Ldap.Proxy.UserInfo> RegisterAsync(string email, string passwordHash) {
            return base.Channel.RegisterAsync(email, passwordHash);
        }
    }
}
